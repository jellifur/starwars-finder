{"version":3,"sources":["controllers/search-characters/styles.module.css","ui/search-input/index.js","ui/character-card/index.js","controllers/search-characters/index.js","App.js","serviceWorker.js","index.js","ui/character-card/styles.module.css","ui/search-input/styles.module.css"],"names":["module","exports","background","search","searchContainer","searchHeader","title","appDescription","searchBox","characters","navBtn","navBtns","SearchInput","_this$props","this","props","value","onChange","onSubmit","react_default","a","createElement","className","styles","searchInput","type","searchBtn","onClick","src","alt","Component","defaultProps","CharacterCard","name","imageUrl","characterCard","length","charImage","labelContainer","label","SearchCharacters","state","searchValue","nextUrl","undefined","prevUrl","handleSearchChange","event","_this","setState","target","handleSubmit","preventDefault","fetchUrl","concat","url","fetch","method","then","res","json","next","previous","results","_this2","_this$state","Fragment","search_input","map","char","character_card","key","App","search_characters","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ff9b2dae.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"background\":\"styles_background__2bFrJ\",\"search\":\"styles_search__1CSoC\",\"searchContainer\":\"styles_searchContainer__3uaua\",\"searchHeader\":\"styles_searchHeader__Mu8iB\",\"title\":\"styles_title__1Dqy1\",\"appDescription\":\"styles_appDescription__cbEik\",\"searchBox\":\"styles_searchBox__LZJFk\",\"characters\":\"styles_characters__12x_w\",\"navBtn\":\"styles_navBtn__zhvfh\",\"navBtns\":\"styles_navBtns__KWbTr\"};","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport styles from './styles.module.css';\n\nclass SearchInput extends Component {\n  render() {\n    const { value, onChange, onSubmit } = this.props;\n\n    return (\n      <form className={styles.searchInput}>\n        <input type=\"text\" onChange={onChange} value={value} />\n        <button type=\"submit\" className={styles.searchBtn} onClick={onSubmit}>\n          {/* TODO: Use an icon library and remove img src*/}\n          <img src=\"/assets/search.svg\" alt=\"Search\"/>\n        </button>\n      </form>\n    );\n  }\n}\n\nSearchInput.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n  onSubmit: PropTypes.func\n};\n\nSearchInput.defaultProps = {\n  value: '',\n  onSubmit: () => undefined\n};\n\nexport default SearchInput;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport styles from './styles.module.css';\n\nclass CharacterCard extends Component {\n  render() {\n    const { name, onClick, imageUrl } = this.props;\n\n    return (\n      <div className={styles.characterCard}>\n        {imageUrl && imageUrl.length > 0 && <img className={styles.charImage} src={imageUrl}/>}\n        {name && name.length > 0 && <div className={styles.labelContainer}><div className={styles.label}>{name}</div></div>}\n      </div>\n    );\n  }\n}\n\nCharacterCard.propTypes = {\n  name: PropTypes.string,\n  onClick: PropTypes.func,\n  imageUrl: PropTypes.string /* TODO: Pass in image URL to display image of characters */\n};\n\nCharacterCard.defaultProps = {\n  name: '',\n  onClick: () => undefined\n};\n\nexport default CharacterCard;\n","import React, { Component } from 'react';\n\nimport SearchInput from 'ui/search-input/index.js';\nimport CharacterCard from 'ui/character-card/index.js';\n\nimport styles from './styles.module.css';\n\nclass SearchCharacters extends Component {\n  state = {\n    searchValue: '',\n    characters: [],\n    nextUrl: undefined,\n    prevUrl: undefined\n  }\n\n  componentDidMount() {\n    /* TODO: Query first set of characters so page is not blank */\n  }\n\n  handleSearchChange = event => this.setState({ searchValue: event.target.value });\n\n  handleSubmit = event => {\n    const { searchValue } = this.state;\n\n    event.preventDefault();\n    if (searchValue && searchValue.length > 0) {\n      this.fetchUrl(`https://swapi.co/api/people/?search=${searchValue}`);\n    }\n  }\n\n  fetchUrl = url => {\n    if (!url) {\n      return;\n    }\n\n    fetch(url, { method: \"GET\" })\n      .then(res => res.json())\n      .then((res) => {\n        if (!res) {\n          return;\n        }\n\n        /* TODO: Get lodash to check nested results more cleanly */\n        const nextUrl = res.next ? res.next : undefined\n        const prevUrl = res.previous ? res.previous : undefined\n        return this.setState({ characters: res.results, prevUrl, nextUrl })\n      });\n  }\n\n  render() {\n    const { searchValue, characters, prevUrl, nextUrl } = this.state;\n\n    return (\n      <React.Fragment>\n        <div className={styles.background}></div>\n\n        <div className={styles.search}>\n          <div className={styles.searchContainer}>\n            <header className={styles.searchHeader}>\n              <h1 className={styles.title}>Star Wars Characters</h1>\n              <p className={styles.appDescription}>\n                You can search for any Star Wars character. <br/>\n                Lorem ipsum dolor sit amet, consectetur adipiscing. <br/>\n                Sed ut perspiciatis unde omnis iste natus.\n              </p>\n            </header>\n\n            <div className={styles.searchBox}>\n              <SearchInput value={searchValue} onChange={this.handleSearchChange} onSubmit={this.handleSubmit}/>\n            </div>\n\n            <div className={styles.characters}>\n              {characters.map(char => \n                <CharacterCard name={char.name} key={char.url}/>\n              )}\n            </div>\n\n            <div className={styles.navBtns}>\n              {prevUrl && <button className={styles.navBtn} onClick={() => this.fetchUrl(prevUrl)}>&lt;&lt; Prev</button>}\n              {nextUrl && <button className={styles.navBtn} onClick={() => this.fetchUrl(nextUrl)}>Next &gt;&gt;</button>}\n            </div>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default SearchCharacters;\n","import React, { Component } from 'react';\n\nimport SearchCharacters from 'controllers/search-characters/index.js';\n\nclass App extends Component {\n  render() {\n    return <SearchCharacters/>;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"characterCard\":\"styles_characterCard__2QoBh\",\"charImage\":\"styles_charImage__1IJ0i\",\"labelContainer\":\"styles_labelContainer__zqb1g\",\"label\":\"styles_label__1OVfm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"searchInput\":\"styles_searchInput__1NR-o\",\"searchBtn\":\"styles_searchBtn__1FvTu\"};"],"sourceRoot":""}